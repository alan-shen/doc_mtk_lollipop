========================================================================================================================================================================
pre-recovery:
+++++++++++++
init.rc:
++++++++

./system/core/rootdir/init.rc:650:service pre-recovery /system/bin/uncrypt
./system/core/rootdir/init.rc-651-    class main
./system/core/rootdir/init.rc-652-    disabled
./system/core/rootdir/init.rc-653-    oneshot

========================================================================================================================================================================
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2968-    /**
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2969-     * Low-level function to reboot the device. On success, this
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2970-     * function doesn't return. If more than 20 seconds passes from
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2971-     * the time a reboot is requested (120 seconds for reboot to
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2972-     * recovery), this method returns.
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2973-     *
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2974-     * @param reason code to pass to the kernel (e.g. "recovery"), or null.
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2975-     */
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2976-    public static void lowLevelReboot(String reason) {
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2977-        if (reason == null) {
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2978-            reason = "";
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2979-        }
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2980-        long duration;
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2981-        if (reason.equals(PowerManager.REBOOT_RECOVERY)) {
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2982-            // If we are rebooting to go into recovery, instead of
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2983-            // setting sys.powerctl directly we'll start the
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java:2984:            // pre-recovery service which will do some preparation for
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2985-            // recovery and then reboot for us.
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2986-            //
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2987-            // This preparation can take more than 20 seconds if
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2988-            // there's a very large update package, so lengthen the
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2989-            // timeout.
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java:2990:            SystemProperties.set("ctl.start", "pre-recovery");
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2991-            duration = 120 * 1000L;
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2992-        } else {
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2993-            SystemProperties.set("sys.powerctl", "reboot," + reason);
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2994-            duration = 20 * 1000L;
frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java-2995-        }

========================================================================================================================================================================
如何生成签名密钥对?
+++++++++++++++++++

1.生成公钥:

    /*
     * -3 算法的参数(public exponent)
     * 1024 密钥长度
     */
    openssl genrsa -3 \
        -out testkey.pem \
        1024

2.产生 PKCS#10 格式的认证请求(证书):

    /*
     * 该命令主要包括一个公钥(包括公钥的过期时间等)和一些相关信息(如组织名称和联系人邮件地址)
     */
    openssl req -new -x509 \
        -key testkey.pem \
        -out testkey.x509.pem \
        -days 10000 \
        -subj '/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Andoid/emailAddress=android@android.com'

3.产生 PKCS#8 格式的私钥(Private-Key Information Syntax Standard):

    openssl pkcs8 -in testkey.pem -topk8 -outform DER -out testkey.pk8 -nocrypt

========================================================================================================================================================================
Android 中如何为 apk 或 ota.zip 签名?
+++++++++++++++++++++++++++++++++++++

    /*
     * PATH : /build/tools/signapk/signapk.jar
     * (1) 读取公钥和私钥;
     * (2) 将签名信息写入到 MANIFEST.MF;
     * (3) 对 manifest 签名写入到 CERT.SF;
     * (4) 把对输出文件的签名和公钥写入到 CERT.RSA;
     */
	java -jar signapk.jar    publickey          privatekey      input.zip output.zip
	java -jar signapk.jar    testkey.x509.pem   testkey.pk8     input.zip output.zip

========================================================================================================================================================================
